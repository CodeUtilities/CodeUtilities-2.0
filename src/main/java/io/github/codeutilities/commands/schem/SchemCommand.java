package io.github.codeutilities.commands.schem;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.ArgumentBuilder;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import io.github.codeutilities.commands.Command;
import io.github.codeutilities.commands.arguments.ArgBuilder;
import io.github.codeutilities.schem.Litematica;
import io.github.codeutilities.util.ChatType;
import io.github.codeutilities.util.ChatUtil;
import io.github.codeutilities.util.ItemUtil;
import io.github.codeutilities.util.TemplateUtils;
import io.github.cottonmc.clientcommands.ArgumentBuilders;
import io.github.cottonmc.clientcommands.CottonClientCommandSource;
import net.minecraft.client.MinecraftClient;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.text.LiteralText;

import java.io.File;

public class SchemCommand extends Command {

    @Override
    public void register(MinecraftClient mc, CommandDispatcher<CottonClientCommandSource> cd) {
        cd.register(subcommand(mc, ArgBuilder.literal("schem")));
        cd.register(subcommand(mc, ArgBuilder.literal("litematic")));
        cd.register(subcommand(mc, ArgBuilder.literal("schematic")));
    }

    public LiteralArgumentBuilder<CottonClientCommandSource> subcommand(MinecraftClient mc, LiteralArgumentBuilder<CottonClientCommandSource> literal){
            literal.then(ArgBuilder.literal("load")
                    .then(ArgumentBuilders.argument("filepath", StringArgumentType.greedyString())
                .executes(ctx -> {
                    if (mc.player.isCreative()){
                        String arg = StringArgumentType.getString(ctx, "filepath");
                    File target = new File("schematics/" + arg);
                    String format = "";

                    if (!target.getName().endsWith(".litematic") && !target.getName().endsWith(".schematic") && !target.getName().endsWith(".schem")) {
                        if (new File("schematics/" + arg + ".litematic").exists()) {
                            target = new File("schematics/" + arg + ".litematic");
                            format = "litematic";
                        }
                        if (new File("schematics/" + arg + ".schematic").exists()) {
                            target = new File("schematics/" + arg + ".schematic");
                            format = "schematic";
                        }
                        if (new File("schematics/" + arg + ".schem").exists()) {
                            target = new File("schematics/" + arg + ".schem");
                            format = "schem";
                        }
                    } else {
                        if (target.getName().endsWith(".litematic")) {
                            format = "litematic";
                        }
                        if (target.getName().endsWith(".schematic")) {
                            format = "schematic";
                        }
                        if (target.getName().endsWith(".schem")) {
                            format = "schem";
                        }
                    }

                    if (target.exists()) {
                        System.out.println(target.exists());
                        if (format == "litematic") {
                            System.out.println("its a litematic");
                            File finalTarget = target;
                            new Thread(() -> {
                                try {
                                    String template = Litematica.parse(finalTarget);
                                    System.out.println(template);
                                } catch (Exception e) {
                                    ChatUtil.sendMessage("An error occurred while executing this command.", ChatType.FAIL);
                                    e.printStackTrace();
                                }
                            }).start();

                        } else if (format == "schematic") {
                            System.out.println("its a schematic");
                            File finalTarget = target;
                            new Thread(() -> {
                                try {
                                } catch (Exception e) {
                                    ChatUtil.sendMessage("An error occurred while executing this command.", ChatType.FAIL);
                                    e.printStackTrace();
                                }
                            }).start();
                        } else {
                            ChatUtil.sendMessage("The file has to be a litematic, schematic, schem or vanilla nbt format.", ChatType.FAIL);
                        }
                    } else {
                        ChatUtil.sendMessage("The file ยง6" + arg + "ยงc was not found.", ChatType.FAIL);
                    }
                }else{
                    ChatUtil.sendTranslateMessage("codeutilities.command.require_creative_mode", ChatType.FAIL);
                }
                    return 1;
                })))
                .then(ArgBuilder.literal("builder")
                        .executes(ctx -> {
                            if (mc.player.isCreative()) {
                                ItemStack stack = new ItemStack(Items.STICKY_PISTON);
                                String templateData = "";
                                TemplateUtils.applyRawTemplateNBT(stack, "Schem2DF Builder", "CodeUtilities", templateData);
                                stack.setCustomName(new LiteralText("ยงbยงlFunction ยง3ยป CodeยงbUtilitiesยง7-ยงdSchem2DF Builder"));
                                ChatUtil.sendMessage("You received the ยงdSchem2DF Builderยงb! Place it down in your codespace and open the chest to get functions!",
                                        ChatType.INFO_BLUE);
                                ItemUtil.giveCreativeItem(stack);
                            } else {
                                ChatUtil.sendTranslateMessage("codeutilities.command.require_creative_mode", ChatType.FAIL);
                            }
                            return 1;
                        })
                )
                    .then(ArgBuilder.literal("saver")
                            .executes(ctx -> {
                                if (mc.player.isCreative()) {
                                    ItemStack stack = new ItemStack(Items.PISTON);
                                    String templateData = "";
                                    TemplateUtils.applyRawTemplateNBT(stack, "Schem2DF Saver", "CodeUtilities", templateData);
                                    stack.setCustomName(new LiteralText("ยงbยงlFunction ยง3ยป CodeยงbUtilitiesยง7-ยงdSchem2DF Saver"));
                                    ChatUtil.sendMessage("You received the ยงdSchem2DF Saverยงb! Place it down in your codespace and open the chest to get functions!",
                                            ChatType.INFO_BLUE);
                                    ItemUtil.giveCreativeItem(stack);
                                } else {
                                    ChatUtil.sendTranslateMessage("codeutilities.command.require_creative_mode", ChatType.FAIL);
                                }
                                return 1;
                            })
                    )
                   .then(ArgBuilder.literal("transfer")
                .executes(ctx -> {
                    if (mc.player.isCreative()) {
                        ItemStack stack = new ItemStack(Items.PISTON);
                        String templateData = "";
                        TemplateUtils.applyRawTemplateNBT(stack, "Schem2DF Transfer", "CodeUtilities", templateData);
                        stack.setCustomName(new LiteralText("ยงbยงlFunction ยง3ยป CodeยงbUtilitiesยง7-ยงdSchem2DF Transfer"));
                        ChatUtil.sendMessage("You received the ยงdSchem2DF Transferยงb! Place it down in your codespace and open the chest to get functions!",
                                ChatType.INFO_BLUE);
                        ItemUtil.giveCreativeItem(stack);
                    } else {
                        ChatUtil.sendTranslateMessage("codeutilities.command.require_creative_mode", ChatType.FAIL);
                    }
                    return 1;
                })
        );
        return literal;
    }

}
