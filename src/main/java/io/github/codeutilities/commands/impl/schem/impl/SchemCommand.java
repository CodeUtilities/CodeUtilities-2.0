package io.github.codeutilities.commands.impl.schem.impl;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import io.github.codeutilities.commands.impl.schem.sys.Schematic;
import io.github.codeutilities.commands.impl.schem.sys.loaders.LitematicaLoader;
import io.github.codeutilities.commands.impl.schem.sys.loaders.MCEditSchematicLoader;
import io.github.codeutilities.commands.impl.schem.sys.loaders.MSchematicReader;
import io.github.codeutilities.commands.impl.schem.sys.loaders.MSpongeSchematicReader;
import io.github.codeutilities.commands.impl.schem.sys.sk89q.jnbt.NBTInputStream;
import io.github.codeutilities.commands.impl.schem.sys.utils.DFUtils;
import io.github.codeutilities.commands.sys.Command;
import io.github.codeutilities.commands.sys.arguments.ArgBuilder;
import io.github.codeutilities.util.chat.ChatType;
import io.github.codeutilities.util.chat.ChatUtil;
import io.github.codeutilities.util.misc.ItemUtil;
import io.github.codeutilities.util.render.ToasterUtil;
import io.github.codeutilities.util.templates.TemplateUtils;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.zip.GZIPInputStream;
import net.fabricmc.fabric.api.client.command.v1.FabricClientCommandSource;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.toast.SystemToast;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.text.LiteralText;
import org.apache.commons.io.FilenameUtils;

public class SchemCommand extends Command {

    @Override
    public void register(MinecraftClient mc, CommandDispatcher<FabricClientCommandSource> cd) {
        cd.register(subcommand(mc, ArgBuilder.literal("schem")));
        cd.register(subcommand(mc, ArgBuilder.literal("litematic")));
        cd.register(subcommand(mc, ArgBuilder.literal("schematic")));
    }

    public LiteralArgumentBuilder<FabricClientCommandSource> subcommand(MinecraftClient mc, LiteralArgumentBuilder<FabricClientCommandSource> literal) {
        literal.then(ArgBuilder.literal("load")
                .then(ArgBuilder.argument("filepath", StringArgumentType.greedyString())
                        .executes(ctx -> {
                            if (this.isCreative(mc)) {
                                String arg = StringArgumentType.getString(ctx, "filepath");
                                File target = new File("schematics/" + arg);
                                String format = "";

                                if (!target.getName().endsWith(".litematic") && !target.getName().endsWith(".schematic") && !target.getName().endsWith(".schem")) {
                                    if (new File("schematics/" + arg + ".litematic").exists()) {
                                        target = new File("schematics/" + arg + ".litematic");
                                        format = "litematic";
                                    }
                                    if (new File("schematics/" + arg + ".schematic").exists()) {
                                        target = new File("schematics/" + arg + ".schematic");
                                        format = "schematic";
                                    }
                                    if (new File("schematics/" + arg + ".schem").exists()) {
                                        target = new File("schematics/" + arg + ".schem");
                                        format = "schem";
                                    }
                                } else {
                                    if (target.getName().endsWith(".litematic")) {
                                        format = "litematic";
                                    }
                                    if (target.getName().endsWith(".schematic")) {
                                        format = "schematic";
                                    }
                                    if (target.getName().endsWith(".schem")) {
                                        format = "schem";
                                    }
                                }

                                final String finalFormat = format;
                                final File finalFile = target;

                                if (target.exists()) {
                                    System.out.println(target.exists());
                                    new Thread(() -> {
                                        try {
                                            MSchematicReader reader;

                                            switch (finalFormat) {
                                                case "schematic":
                                                    try {
                                                        NBTInputStream nbtStream = new NBTInputStream(new GZIPInputStream(new FileInputStream(finalFile)));
                                                        reader = new MCEditSchematicLoader(nbtStream);
                                                    } catch (IOException ignored) {
                                                        NBTInputStream nbtStream = new NBTInputStream(new GZIPInputStream(new FileInputStream(finalFile)));
                                                        reader = new MSpongeSchematicReader(nbtStream);
                                                    }
                                                    break;
                                                case "schem": {
                                                    NBTInputStream nbtStream = new NBTInputStream(new GZIPInputStream(new FileInputStream(finalFile)));
                                                    reader = new MSpongeSchematicReader(nbtStream);
                                                    break;
                                                }
                                                case "litematic": {
                                                    NBTInputStream nbtStream = new NBTInputStream(new GZIPInputStream(new FileInputStream(finalFile)));
                                                    reader = new LitematicaLoader(nbtStream);
                                                    break;
                                                }
                                                default:
                                                    ChatUtil.sendMessage("[Schem2DF] The file has to be a litematic, schematic, schem or vanilla nbt format.", ChatType.FAIL);
                                                    return;
                                            }

                                            ChatUtil.sendMessage("[Schem2DF] Loading the file §e" + finalFile.getName() + "§e...", ChatType.INFO_YELLOW);

                                            Schematic schematic = reader.read();
                                            reader.close();

                                            String[] templateDatas = DFUtils.GenerateSchematicFunction(schematic, FilenameUtils.removeExtension(finalFile.getName()));
                                            System.out.println(schematic.name);
                                            for (int i = 0; i < templateDatas.length; i++) {
                                                ItemStack stack = new ItemStack(Items.NETHER_QUARTZ_ORE);
                                                TemplateUtils.compressTemplateNBT(stack, "Schem2DF Data", "CodeUtilities", templateDatas[i]);
                                                stack.setCustomName(new LiteralText("§b§lFunction §3» " + (schematic.name.equals("Unnamed") ? schematic.name : FilenameUtils.removeExtension(finalFile.getName())) + " #" + (i + 1)));
                                                ItemUtil.giveCreativeItem(stack, false);
                                                Thread.sleep(2);
                                            }

                                            ChatUtil.sendMessage("[Schem2DF] The file has successfully been loaded!", ChatType.SUCCESS);
                                            ChatUtil.sendMessage("[Schem2DF] Connect all Code Templates together, and use it with §dSchem2DF Builder§b.", ChatType.INFO_BLUE);
                                            ChatUtil.sendMessage("[Schem2DF] Schem2DF Builder can be obtained with §d/schem builder§b.", ChatType.INFO_BLUE);
                                            ToasterUtil.sendToaster("Structure File Loaded!", finalFile.getName(), SystemToast.Type.NARRATOR_TOGGLE);
                                        } catch (Exception e) {
                                            ChatUtil.sendMessage("An error occurred while executing this command.", ChatType.FAIL);
                                            e.printStackTrace();
                                        }
                                    }).start();
                                } else {
                                    ChatUtil.sendMessage("The file §6" + arg + "§c was not found.", ChatType.FAIL);
                                }
                            }
                            return 1;
                        })))
                .then(ArgBuilder.literal("builder")
                        .executes(ctx -> {
                            if (this.isCreative(mc)) {
                                ItemStack stack = new ItemStack(Items.STICKY_PISTON);
                                String templateData = "";
                                TemplateUtils.applyRawTemplateNBT(stack, "Schem2DF Builder", "CodeUtilities", templateData);
                                stack.setCustomName(new LiteralText("§b§lFunction §3» §dSchem2DF Builder"));
                                ChatUtil.sendMessage("You received the §dSchem2DF Builder§b! Place it down in your codespace and open the chest to get functions!",
                                        ChatType.INFO_BLUE);
                                ItemUtil.giveCreativeItem(stack, true);
                            }
                            return 1;
                        })
                )
                .then(ArgBuilder.literal("saver")
                        .executes(ctx -> {
                            if (this.isCreative(mc)) {
                                ItemStack stack = new ItemStack(Items.PISTON);
                                String templateData = "";
                                TemplateUtils.applyRawTemplateNBT(stack, "Schem2DF Saver", "CodeUtilities", templateData);
                                stack.setCustomName(new LiteralText("§b§lFunction §3» §dSchem2DF Saver"));
                                ChatUtil.sendMessage("You received the §dSchem2DF Saver§b! Place it down in your codespace and open the chest to get functions!",
                                        ChatType.INFO_BLUE);
                                ItemUtil.giveCreativeItem(stack, true);
                            }
                            return 1;
                        })
                )
                .then(ArgBuilder.literal("transferer")
                        .executes(ctx -> {
                            if (this.isCreative(mc)) {
                                ItemStack stack = new ItemStack(Items.PISTON);
                                String templateData = "";
                                TemplateUtils.applyRawTemplateNBT(stack, "Schem2DF Transferer", "CodeUtilities", templateData);
                                stack.setCustomName(new LiteralText("§b§lFunction §3» §dSchem2DF Transferer"));
                                ChatUtil.sendMessage("You received the §dSchem2DF Transferer§b! Place it down in your codespace and open the chest to get functions!",
                                        ChatType.INFO_BLUE);
                                ItemUtil.giveCreativeItem(stack, true);
                            }
                            return 1;
                        })
                );
        return literal;
    }

}
